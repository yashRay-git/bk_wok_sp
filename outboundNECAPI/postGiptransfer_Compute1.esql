



CREATE COMPUTE MODULE postGiptransfer_Compute1

	DECLARE soap NAMESPACE 'http://schemas.xmlsoap.org/soap/envelope/';
	DECLARE ns2 NAMESPACE 'com.ghipss.gip';

	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN	    
         


		DECLARE soapResponse REFERENCE TO InputRoot.XMLNSC.soap:Envelope.soap:Body.ns2:GIPTransactionOpResponse.GIPTransactionResponse;

		SET Environment.backend_response = soapResponse;
		SET Environment.payload = CAST(ASBITSTREAM(InputRoot) as CHARACTER CCSID 1208 ENCODING 546);
		set Environment.logtype = 'backend_Response';

		call envData();		
		
		-- SET OutputRoot.XMLNSC = soapResponse;
		-- PROPAGATE TO TERMINAL 'out1';
		-- CREATE LASTCHILD OF OutputRoot DOMAIN 'JSON';
		CREATE FIELD OutputRoot.JSON.Data;
		DECLARE outref REFERENCE TO OutputRoot.JSON.Data;		


		IF soapResponse.ActCode = 000 THEN
			-- Map fields for a successful response            


			SET outref.channelRef = soapResponse.SessionID;
			SET outref.accountToCredit = soapResponse.AccountToCredit;
			SET outref.nameToCredit = soapResponse.NameToCredit;
			SET outref.statusCode = soapResponse.ActCode;
			SET outref.aprvCode = soapResponse.AprvCode;

		ELSEIF soapResponse.ActCode = 114 THEN

			SET outref.transactionStatus = 'Invalid Credit Account';

		ELSEIF soapResponse.ActCode = 119 THEN

			SET outref.transactionStatus = 'Merchant Account not allowed';

		ELSE

			SET outref.transactionStatus = 'timeout, please try again';

		END IF;
		--		
		-- SET Environment.channel_response = outref;
		SET Environment.payload = CAST(ASBITSTREAM(OutputRoot) as CHARACTER CCSID 1208 ENCODING 546);
		set Environment.logtype = 'channel_response';

		SET Environment.ChannelRes = OutputRoot.JSON.Data;
		--

		call envData();		


		SET OutputRoot.JSON.Data = Environment.ChannelRes; 


	end;
	CREATE PROCEDURE envData()
	BEGIN
		set OutputRoot = null;
		DECLARE envRef REFERENCE TO Environment;
		Set OutputRoot.XMLNSC.Request.payload = envRef.payload;
		SET OutputRoot.XMLNSC.Request.logtype = envRef.logtype;
		Set OutputRoot.XMLNSC.Request.applicationname = envRef.applicationname;
		Set OutputRoot.XMLNSC.Request.requestid = envRef.requestid;
		Set OutputRoot.XMLNSC.Request.msgflow = envRef.msgflow;
		propagate TO TERMINAL 'out1';
		set OutputRoot = null;

	END;
END MODULE;